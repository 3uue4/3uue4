require('dotenv').config();
const { Client, GatewayIntentBits, Collection, ActivityType } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
async function connectDB() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    } catch (error) {
        console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    }
}

// ุฅูุดุงุก ุนููู Discord ุฌุฏูุฏ
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates
    ]
});

// ุชุฎุฒูู ุงูุฃูุงูุฑ
client.commands = new Collection();

// ุชุญููู ุงูุฃูุงูุฑ
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
    } else {
        console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
    }
}

// ุฏุงูุฉ ููุงุชุตุงู ุจุงูููุงุฉ ุงูุตูุชูุฉ
async function connectToVoiceChannel() {
    try {
        const guild = await client.guilds.fetch(process.env.GUILD_ID);
        const channel = await guild.channels.fetch(process.env.VOICE_CHANNEL_ID);
        
        if (channel) {
            const connection = joinVoiceChannel({
                channelId: channel.id,
                guildId: channel.guild.id,
                adapterCreator: channel.guild.voiceAdapterCreator,
            });
            
            console.log(`โ ุชู ุงูุงุชุตุงู ุจุงูููุงุฉ ุงูุตูุชูุฉ: ${channel.name}`);
            
            // ุฅุนุงุฏุฉ ุงูุงุชุตุงู ูู ุญุงูุฉ ุงูุงููุทุงุน
            connection.on('disconnect', () => {
                console.log('โ ุชู ูุทุน ุงูุงุชุตุงู ุจุงูููุงุฉ ุงูุตูุชูุฉุ ุฌุงุฑู ุฅุนุงุฏุฉ ุงูุงุชุตุงู...');
                setTimeout(connectToVoiceChannel, 5000);
            });
        }
    } catch (error) {
        console.error('โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจุงูููุงุฉ ุงูุตูุชูุฉ:', error);
        setTimeout(connectToVoiceChannel, 5000);
    }
}

// ุญุฏุซ ุนูุฏ ุชุณุฌูู ุงูุฏุฎูู
client.once('ready', async () => {
    console.log(`โ ุชู ุชุณุฌูู ุฏุฎูู ุงูุจูุช ุจุงุณู: ${client.user.tag}`);
    
    // ุชุนููู ุญุงูุฉ ุงูุจูุช
    client.user.setPresence({
        status: process.env.BOT_STATUS || 'dnd',
        activities: [{
            name: process.env.BOT_ACTIVITY || 'Hollow Depth | ูุธุงู ุงููุณุงุนุฏุฉ',
            type: ActivityType.Streaming,
            url: 'https://twitch.tv/discord'
        }]
    });
    
    // ุงูุงุชุตุงู ุจุงูููุงุฉ ุงูุตูุชูุฉ ุจุนุฏ ุชุณุฌูู ุงูุฏุฎูู
    await connectToVoiceChannel();
});

// ูุนุงูุฌุฉ ุงูุฃูุงูุฑ
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const command = client.commands.get(interaction.commandName);

    if (!command) return;

    try {
        await command.execute(interaction);
    } catch (error) {
        console.error(error);
        await interaction.reply({ 
            content: 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฐ ุงูุฃูุฑ!', 
            ephemeral: true 
        });
    }
});

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุจู ุชุณุฌูู ุฏุฎูู ุงูุจูุช
connectDB();

// ุชุณุฌูู ุงูุฏุฎูู ุจุงุณุชุฎุฏุงู ุงูุชููู ูู ููู .env
client.login(process.env.TOKEN)
    .then(() => console.log('๐ ุชู ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ!'))
    .catch(error => console.error('โ ูุดู ุชุณุฌูู ุฏุฎูู ุงูุจูุช:', error)); 